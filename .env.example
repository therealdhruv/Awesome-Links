# Environment variables declared in this file are automatically made available to Prisma.
# See the documentation for more detail: https://pris.ly/d/prisma-schema#accessing-environment-variables-from-the-schema

# Prisma supports the native connection string format for PostgreSQL, MySQL, SQLite, SQL Server, MongoDB and CockroachDB.
# See the documentation for all the connection string options: https://pris.ly/d/connection-strings

MIGRATE_DATABASE_URL="postgres://therealdhruv:ktoJqvg .... "

# Steps to get the DATABASE_URL :
# Go to - https://cloud.prisma.io/projects/create
# Log in using GitHub
# In the "Create project" page, paste in your database's connection string to connect your project to the database. If your database is behind a Static IP, enable the feature in the "Static IP" section. Once you're done, click Create project.
# Once your project is created, you should be redirected to the "Get started" page. You can connect your project to your GitHub repository in the "Enable schema synchronization" section, however, it's completely optional.
# To create a Data Proxy connection string, click the Create a new connection string button in the "Create a Data Proxy new connection string" section. Give your connection string a name (eg - Production) and click Create once you're ready. 
# Copy the Prisma Data Proxy URL as you won't be able to see it again, but you can create more later.
# Create a DATABASE_URL variable and set the Prisma Data Proxy here:
DATABASE_URL="prisma://aws-eu-central-1.prisma-data.com/?api_key=8TwUJdZ1X ... "


# Create new scripts in package.json
# Next, update your package.json file by adding a vercel-build script:

#   "scripts": {
#     //... existing scripts
#     "vercel-build": "npx prisma generate --data-proxy && next build",
#   },
# The vercel-build script will generate Prisma Client that uses the Prisma Data Proxy and build the application.




# Steps to setup Auth0

# Create a new Auth0 (https://auth0.com/) account
# Create a new application in Auth0
# Regular Web Application and finalize creating the app by selecting the Create button on the bottom right of the dialog.
# Now you'll have to get 3 values from Auth0 - AUTH0_ISSUER_BASE_URL, AUTH0_CLIENT_ID and AUTH0_CLIENT_SECRET


# The `secret` property defines the JWT secret that will be used to sign and verify JWT tokens used for auth.
# AUTH0_SECRET is generated by running `openssl rand -hex 32` in the terminal and you gotta add this in the vercel's environment variables
AUTH0_SECRET='48b88d328d5f1cca56c79 ... '

# AUTH0_BASE_URL='https://awesome-links-flame.vercel.app/'  This is the production url, not for local dev server
AUTH0_BASE_URL='http://localhost:3000/'

# Get the following from the Auth0 dashboard
# 'Domain' on the Auth0 dashboard is the 'AUTH0_ISSUER_BASE_URL'
AUTH0_ISSUER_BASE_URL=https://dev-rdm ... 
AUTH0_CLIENT_ID='lPU8l ... '
AUTH0_CLIENT_SECRET='lP697tV ... '

# AUTH0_HOOK_SECRET is generated by running `openssl rand -hex 32` in the terminal and you gotta add this in the vercel's environment variables
AUTH0_HOOK_SECRET='11a252 ... '



# FINALLY deploy the app on Vercel and simply click on import the env variables so you don't have to manually write every one of them.

# You'll have to update some settings in the Auth0 dashboard as well.
# Application Login URI - http://<deployed link from vercel>/api/auth/callback
# Allowed callback URLs - http://<deployed link from vercel>/api/auth/callback, http://localhost:3000/api/auth/callback (yes! you can add more than one in this field on Auth0 as well)
# Allowed logout URLs - http://<deployed link from vercel>/, http://localhost:3000/ (yes! you can add more than one in this field on Auth0 as well)
# Allowed web origins - http://<deployed link from vercel>/, http://localhost:3000/ (yes! you can add more than one in this field on Auth0 as well)
#
